
ngx

------------------------------------------------------------
ok                          -> boolean
err                         -> string?
------------------------------------------------------------

ngx.null                    -> null

ngx.ctx
ngx.ctx.*                   -> any

ngx.arg                     -> map<string>

ngx.var                     -- ngx.var.VARIABLE
ngx.var.*                   -> string
ngx.var.app_name            -> string
ngx.var.act_type            -> string
ngx.var.remote_addr         -> string
ngx.var.remote_port         -> string
ngx.var.remote_user         -> string
ngx.var.remote_passwd       -> string
ngx.var.binary_remote_addr  -> string
ngx.var.host                -> string
ngx.var.hostname            -> string
ngx.var.scheme              -> string
ngx.var.https               -> string
ngx.var.http_host           -> string
ngx.var.http_user_agent     -> string
ngx.var.http_content_type   -> string
ngx.var.http_cookie         -> string
ngx.var.server_name         -> string
ngx.var.content_type        -> string
ngx.var.content_length      -> string
ngx.var.is_args             -> string
ngx.var.query_string        -> string
ngx.var.nginx_version       -> string
ngx.var.uri                 -> string
ngx.var.request_uri         -> string
ngx.var.request_method      -> string
ngx.var.request_filename    -> string
ngx.var.cookie_openid       -> string

CaptureOpt                      -- Nginx子请求选项
CaptureOpt.method               -> number                   -- 指定子请求的请求方法, 只接受类似 ngx.HTTP_POST 的常量。
CaptureOpt.body                 -> string                   -- 指定子请求的请求体 (仅接受字符串值)。
CaptureOpt.args                 -> string | map<string>     -- 指定子请求的 URI 请求参数 (可以是字符串或者 Lua 表)。
CaptureOpt.ctx                  -> map<any>                 -- 指定一个 Lua 表作为子请求的 ngx.ctx 表，可以是当前请求的 ngx.ctx 表。这种方式可以让父请求和子请求共享完全相同的上下文环境。此选项最早出现在版本 v0.3.1rc25 中。
CaptureOpt.vars                 -> map<string>              -- 用一个 Lua 表设置子请求中的 Nginx 变量值。此选项最早出现在版本 v0.3.1rc31 中。
CaptureOpt.copy_all_vars        -> boolean                  -- 设置是否复制所有当前请求的 Nginx 变量值到子请求中，修改子请求的 nginx 变量值不影响当前 (父) 请求。此选项最早出现在版本 v0.3.1rc31 中。
CaptureOpt.share_all_vars       -> boolean                  -- 设置是否共享所有当前 (父) 请求的 Nginx 变量值到子请求中，修改子请求的 nginx 变量值将影响当前 (父) 请求。应用此选项将可能导致非常难以发现的错误，这种副作用是非常有害的。所以只有当完全明确知道自己在做什么时才打开此选项。
CaptureOpt.always_forward_body  -> boolean                  -- 当设置为 true 时，如果没有设置 body 选项，当前 (父) 请求的请求体将被转发给子请求。被 ngx.req.read_body() 或 lua_need_request_body on 指令读取的请求体将直接转发给子请求，而不是在创建子请求时再复制整个请求体 (无论此请求体是缓存在内存中还是临时文件中)。默认情况下，此选项值为 false，当 body 选项没有设置，且当子请求的请求方法是 PUT 和 POST 时，当前 (父) 请求的请求体才被转发。

CaptureUri                      -- Nginx子请求Uri及选项
CaptureUri.1                    -> string
CaptureUri.2                    -> CaptureOpt

CaptureRes                      -- Nginx子请求返回值
CaptureRes.status               -> number
CaptureRes.header               -> map<string>
CaptureRes.body                 -> string
CaptureRes.truncated            -> boolean

ngx.location
ngx.location.capture(uri: string, opt?: CaptureOpt)     -> CaptureRes
ngx.location.capture_multi(uri: CaptureUri, ...)        -> CaptureRes, ...

ngx.status          -> number
ngx.header          -> map<string | number | (string | number)[]>

ngx.resp            -- ngx.resp.get_headers
ngx.resp.get_headers(max_headers=100?, raw=false?)  -> map<string>

UriArgs -> (map<string | boolean | number | (string | boolean | number)[]>) & never[]

ngx.req
ngx.req.is_internal()                               -> boolean
ngx.req.start_time()                                -> number
ngx.req.http_version()                              -> number
ngx.req.raw_header(no_request_line=false?)          -> string
ngx.req.get_method()                                -> string
ngx.req.set_method(method_id: number)
ngx.req.set_uri(uri: string, jump=false?)
ngx.req.set_uri_args(args: string | UriArgs)
ngx.req.get_uri_args(max_args=100?)                 -> DecodeArgs
ngx.req.get_post_args(max_args=100?)                -> DecodeArgs
ngx.req.get_headers(max_headers=100?, raw=false?)   -> map<string | string[]>
ngx.req.set_header(name: string, value: string | string[])
ngx.req.clear_header(name: string)
ngx.req.read_body()
ngx.req.discard_body()
ngx.req.get_body_data()                             -> string
ngx.req.get_body_file()                             -> string
ngx.req.set_body_data(data: string)
ngx.req.set_body_file(file_name: string, auto_clean=false?)
ngx.req.init_body(buffer_size?: number)
ngx.req.append_body(data_chunk: string)
ngx.req.finish_body()

ngx.req.socket() -> tcpsock

ngx.exec(uri: string, args?: string | map<string>)
ngx.redirect(uri: string, status=302?)
ngx.send_headers()                 -> ok, err
ngx.headers_sent                   -> boolean

ngx.print(output: string | number | boolean | any[], ...)
ngx.say(output: string | number | boolean | any[], ...)
ngx.log(log_level: number, log: string | number | boolean | any[], ...)

ngx.flush(wait=false?)                  -> ok, err

ngx.exit(ngx.OK)
ngx.exit(ngx.ERROR)
ngx.exit(ngx.DECLINED)
ngx.exit(ngx.HTTP_OK)
ngx.exit(ngx.HTTP_NOT_FOUND)
ngx.exit(status: number)

ngx.eof()                                           -> ok, err
ngx.sleep(seconds: number)
ngx.escape_uri(str: string)                         -> string
ngx.unescape_uri(str: string)                       -> string

EncodeArgs -> (map<string | boolean | number | (string | boolean | number)[]>) & never[]
DecodeArgs -> (map<string | boolean | (string | boolean)[]>) & never[]

ngx.encode_args(args: EncodeArgs)                   -> string
ngx.decode_args(str: string)                        -> DecodeArgs

ngx.encode_base64(str: string)                      -> string
ngx.decode_base64(str: string)                      -> string
ngx.crc32_short(str: string)                        -> number
ngx.crc32_long(str: string)                         -> number
ngx.hmac_sha1(secret_key: string, str: string)      -> string
ngx.md5(str: string)                                -> string
ngx.md5_bin(str: string)                            -> string
ngx.sha1_bin(str: string)                           -> string
ngx.quote_sql_str(str: string | number)             -> string
ngx.today()                                         -> string
ngx.time()                                          -> number
ngx.now()                                           -> number
ngx.update_time()
ngx.localtime()                                     -> string
ngx.utctime()                                       -> string
ngx.cookie_time(sec: number)                        -> string
ngx.http_time(sec: number)                          -> string
ngx.parse_http_time(sec: number)                    -> string
ngx.is_subrequest()                                 -> boolean

ngx.re -- 正则表达式库
ngx.re.match(subject: string, regex: string, options?: string, ctx?: { pos: number }, res_table?: table)    -> map<string | boolean>, err
ngx.re.find(subject: string, regex: string, options?: string, ctx?: { pos: number }, nth?: number)          -> number, number, err
ngx.re.gmatch(subject: string, regex: string, options?: string)                                             -> iterator, err
ngx.re.sub(subject: string, regex: string, replace: string | function, options?: string)                               -> string, number, err
ngx.re.gsub(subject: string, regex: string, replace: string | function, options?: string)                              -> string, number, err

iterator()  -> map<string>, err

ngx.shared                                          -- ngx.shared.DICT
ngx.shared.*                                        -> DICT
ngx.shared.my_cache                                 -> DICT
ngx.shared.my_locks                                 -> DICT
ngx.shared.my_miss                                  -> DICT
ngx.shared.my_ipc                                   -> DICT
ngx.shared.my_index                                 -> DICT
ngx.shared.my_dns                                   -> DICT

    DictValue -> string | number | boolean   -- 共享内存数据

    DICT                                                                        -- ngx.shared.DICT
    DICT:get(key: string | number)                       -> DictValue           -- ngx.shared.DICT.get
    DICT:get_stale(key: string | number)                 -> DictValue           -- ngx.shared.DICT.get_stale
    DICT:set(key: string | number, val: DictValue, exptime?: number, flags?: number)         -> ok, err, boolean     -- ngx.shared.DICT.set
    DICT:safe_set(key: string | number, val: DictValue, exptime?: number, flags?: number)    -> ok, err, boolean     -- ngx.shared.DICT.safe_set
    DICT:add(key: string | number, val: DictValue, exptime?: number, flags?: number)         -> ok, err, boolean     -- ngx.shared.DICT.add
    DICT:safe_add(key: string | number, val: DictValue, exptime?: number, flags?: number)    -> ok, err, boolean     -- ngx.shared.DICT.safe_add
    DICT:replace(key: string | number, val: DictValue, exptime?: number, flags?: number)     -> ok, err, boolean     -- ngx.shared.DICT.replace
    DICT:delete(key: string | number)                                            -- ngx.shared.DICT.delete
    DICT:incr(key: string | number, val: number, init?: number, init_ttl?: number) -> number, err   -- ngx.shared.DICT.incr
    DICT:lpush(key: string | number, val: DictValue)     -> number, err          -- ngx.shared.DICT.lpush
    DICT:rpush(key: string | number, val: DictValue)     -> number, err          -- ngx.shared.DICT.rpush
    DICT:lpop(key: string | number)                      -> DictValue, err       -- ngx.shared.DICT.lpop
    DICT:rpop(key: string | number)                      -> DictValue, err       -- ngx.shared.DICT.rpop
    DICT:llen(key: string | number)                      -> number, err          -- ngx.shared.DICT.llen
    DICT:ttl(key: string | number)                       -> number, err          -- ngx.shared.DICT.ttl
    DICT:expire(key: string | number, exptime: number)   -> ok, err              -- ngx.shared.DICT.expire
    DICT:flush_all()                                                    -- ngx.shared.DICT.flush_all
    DICT:flush_expired(max_count?: number)      -> number               -- ngx.shared.DICT.flush_expired
    DICT:get_keys(max_count?: number)           -> string[]             -- ngx.shared.DICT.get_keys
    DICT:capacity()                             -> number               -- ngx.shared.DICT.capacity
    DICT:free_space()                           -> number               -- ngx.shared.DICT.free_space

ngx.socket
ngx.socket.udp() -> udpsock

    udpsock
    udpsock:setpeername(host: string, port: number)
    udpsock:send(data: string)
    udpsock:receive(size?: number)
    udpsock:close()
    udpsock:settimeout(time: number)

ngx.socket.tcp()                                -> tcpsock
ngx.socket.stream()                             -> tcpsock
ngx.socket.connect(host: string, port: number)  -> tcpsock

    tcpsock
    tcpsock:bind(address: string)
    tcpsock:connect(host: string, port?: number | table, options_table?: table)
    tcpsock:setclientcert(cert: string, pkey: string)
    tcpsock:sslhandshake(reused_session?: boolean, server_name?: string, ssl_verify?: boolean)
    tcpsock:send(data: string | string[])
    tcpsock:receive(size_or_pattern?: number)
    tcpsock:receiveany(max: number)
    tcpsock:receiveuntil(pattern: string, options?: table)
    tcpsock:close()
    tcpsock:settimeout(time: number)
    tcpsock:settimeouts(connect_timeout: number, send_timeout: number, read_timeout: number)
    tcpsock:setoption(option, value?)
    tcpsock:setkeepalive(timeout?: number, size?: number)
    tcpsock:getreusedtimes()

ngx.get_phase()                             -> string

ngx.thread
ngx.thread.spawn(cb: function, parms?, ...) -> thread
ngx.thread.wait(co: thread, ...)            -> ok, res, ...
ngx.thread.kill(co: thread)                 -> ok, err

ngx.on_abort(cb: function)                  -> ok, err

ngx.timer
ngx.timer.at(delay: number, cb: function, parms?, ...)      -> number, err
ngx.timer.every(delay: number, cb: function, parms?, ...)   -> number, err
ngx.timer.running_count()                   -> number
ngx.timer.pending_count()                   -> number

ngx.config
ngx.config.subsystem            -> string
ngx.config.debug                -> boolean
ngx.config.prefix()             -> string
ngx.config.nginx_version        -> number
ngx.config.nginx_configure()    -> string
ngx.config.ngx_lua_version      -> number

ngx.worker
ngx.worker.exiting()            -> boolean
ngx.worker.pid()                -> number
ngx.worker.id()                 -> number
ngx.worker.count()              -> number

ngx.AGAIN                       -> -2
ngx.ALERT                       -> 2
ngx.CRIT                        -> 3
ngx.DEBUG                       -> 8
ngx.DECLINED                    -> -5
ngx.DONE                        -> -4
ngx.EMERG                       -> 1
ngx.ERR                         -> 4
ngx.ERROR                       -> -1
ngx.INFO                        -> 7
ngx.NOTICE                      -> 6
ngx.OK                          -> 0
ngx.STDERR                      -> 0
ngx.WARN                        -> 5

ngx.HTTP_ACCEPTED               -> 202
ngx.HTTP_BAD_GATEWAY            -> 502
ngx.HTTP_BAD_REQUEST            -> 400
ngx.HTTP_CLOSE                  -> 444
ngx.HTTP_CONFLICT               -> 409
ngx.HTTP_CONTINUE               -> 100
ngx.HTTP_COPY                   -> 128
ngx.HTTP_CREATED                -> 201
ngx.HTTP_DELETE                 -> 32
ngx.HTTP_FORBIDDEN              -> 403
ngx.HTTP_GATEWAY_TIMEOUT        -> 504
ngx.HTTP_GET                    -> 2
ngx.HTTP_GONE                   -> 410
ngx.HTTP_HEAD                   -> 4
ngx.HTTP_ILLEGAL                -> 451
ngx.HTTP_INSUFFICIENT_STORAGE   -> 507
ngx.HTTP_INTERNAL_SERVER_ERROR  -> 500
ngx.HTTP_LOCK                   -> 4096
ngx.HTTP_METHOD_NOT_IMPLEMENTED -> 501
ngx.HTTP_MKCOL                  -> 64
ngx.HTTP_MOVE                   -> 256
ngx.HTTP_MOVED_PERMANENTLY      -> 301
ngx.HTTP_MOVED_TEMPORARILY      -> 302
ngx.HTTP_NOT_ACCEPTABLE         -> 406
ngx.HTTP_NOT_ALLOWED            -> 405
ngx.HTTP_NOT_FOUND              -> 404
ngx.HTTP_NOT_MODIFIED           -> 304
ngx.HTTP_NO_CONTENT             -> 204
ngx.HTTP_OK                     -> 200
ngx.HTTP_OPTIONS                -> 512
ngx.HTTP_PARTIAL_CONTENT        -> 206
ngx.HTTP_PATCH                  -> 16384
ngx.HTTP_PAYMENT_REQUIRED       -> 402
ngx.HTTP_PERMANENT_REDIRECT     -> 308
ngx.HTTP_POST                   -> 8
ngx.HTTP_PROPFIND               -> 1024
ngx.HTTP_PROPPATCH              -> 2048
ngx.HTTP_PUT                    -> 16
ngx.HTTP_REQUEST_TIMEOUT        -> 408
ngx.HTTP_SEE_OTHER              -> 303
ngx.HTTP_SERVICE_UNAVAILABLE    -> 503
ngx.HTTP_SPECIAL_RESPONSE       -> 300
ngx.HTTP_SWITCHING_PROTOCOLS    -> 101
ngx.HTTP_TEMPORARY_REDIRECT     -> 307
ngx.HTTP_TOO_MANY_REQUESTS      -> 429
ngx.HTTP_TRACE                  -> 32768
ngx.HTTP_UNAUTHORIZED           -> 401
ngx.HTTP_UNLOCK                 -> 8192
ngx.HTTP_UPGRADE_REQUIRED       -> 426
ngx.HTTP_VERSION_NOT_SUPPORTED  -> 505
